#pragma once

// ------------------------------------------------------------------
// ヘッダファイルのインクルード
// ------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <webots/robot.h>

// ------------------------------------------------------------------
// tinkerbotのすべてのデバイスの初期化処理
// ------------------------------------------------------------------
void Initialize(void);

// ------------------------------------------------------------------
// 単体のモータを動かす関数
// 第1引数：デバイス名
// 第2引数：回転角速度入力．"-100"〜"100"を与える．"100"のときに1回転毎秒で回転．
// ------------------------------------------------------------------
void Motor(char* device_name, char* speed);

// ------------------------------------------------------------------
// 2つのモータを動かす関数
// 第1引数：デバイス名（右車輪）
// 第2引数：デバイス名（左車輪）
// 第3引数：曲がり具合．"-100"〜"100"を与える．
//          "100"のとき，右にその場旋回
//           "50"のとき，左車輪だけを動かして右旋回
//            "0"のとき，直進
// 第4引数：回転角速度入力．"-100"〜"100"を与える．"100"のときに1回転毎秒で回転．
// ------------------------------------------------------------------
void Steering(char* device_name1, char* device_name2, char* steer, char* speed);

// ------------------------------------------------------------------
// 単体のグリッパを動かす関数（速度制御）
// 第1引数：デバイス名
// 第2引数：回転角速度入力．"-100"〜"100"を与える．"100"のときに1回転毎秒で回転．
// ------------------------------------------------------------------
void Hand(char* device_name, char* value);


// ------------------------------------------------------------------
// LEDを制御する関数
// 第1引数：デバイス名
// 第2引数：色
// ------------------------------------------------------------------
void Led(char* device_name, char* color);

// ------------------------------------------------------------------
// 距離センサの値を取得する関数
// 第1引数：デバイス名
// ------------------------------------------------------------------
double get_distanceValue(char* device_name);

// ------------------------------------------------------------------
// 角度センサ（エンコーダ）の値を取得する関数
// 第1引数：デバイス名
// ------------------------------------------------------------------
double get_rotationValue(char* device_name);

// ------------------------------------------------------------------
// タッチセンサの値を取得する関数
// 第1引数：デバイス名
// ------------------------------------------------------------------
bool get_touchValue(char* device_name);

// ------------------------------------------------------------------
// カラーセンサの値を取得する関数
// 第1引数：デバイス名
// ------------------------------------------------------------------
char* get_colorValue(char* device_name);

// ------------------------------------------------------------------
// 条件分岐．if文の()内に挿入する関数
// 第1引数：条件の種類
// 第2引数：デバイス名
// 第3引数：比較演算子
// 第4引数：値
// ------------------------------------------------------------------
bool Is_it_true(char* mode, char* device_name, char* sign, char* value);

// ------------------------------------------------------------------
// 動作の継続．引数の条件に到達するまで，動作を継続する．
// 第1引数：条件の種類
// 第2引数：デバイス名
// 第3引数：比較演算子
// 第4引数：値
// ------------------------------------------------------------------
void Keep_until(char* mode, char* device_name, char* sign, char* value);

// ------------------------------------------------------------------
// 基準点用グローバル変数の初期化処理・基準点の設定
// 第1引数：条件の種類
// 第2引数：デバイス名
// ------------------------------------------------------------------
void Reset(char* mode, char* device_name);

// ------------------------------------------------------------------
// 動作の繰り返し．引数の条件に到達するまで，動作を継続する．
// 第1引数：条件の種類
// 第2引数：デバイス名
// 第3引数：比較演算子
// 第4引数：値
// ------------------------------------------------------------------
bool repeat_until(char* mode, char* device_name, char* sign, char* value);

// ------------------------------------------------------------------
// 動作の繰り返し．引数の条件に到達するまで，動作を継続する．
// マクロでwhile文とその前の初期化処理を一括して記述できるようにしている．
// 第1引数：条件の種類
// 第2引数：デバイス名
// 第3引数：比較演算子
// 第4引数：値
// ------------------------------------------------------------------
#define Repeat_until(a, b, c, d) \
	Reset(a, b); \
while (repeat_until(a, b, c, d))
